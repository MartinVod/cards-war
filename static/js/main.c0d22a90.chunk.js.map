{"version":3,"sources":["components/LogInWin.jsx","components/Game.jsx","components/Finish.jsx","App.js","reportWebVitals.js","index.js"],"names":["LogInWin","props","useState","playerName","setPlayerName","goToGame","setGoToGame","className","onChange","e","target","value","length","type","placeholder","to","id","rounds","setRounds","userScore","setUserScore","pcScore","setPcScore","image","userDeck","setUserDeck","pcDeck","setPcDeck","deckIndex","setDeckIndex","useEffect","deck","success","allCards","cards","splice","console","log","src","onClick","userValue","pcValue","parseInt","updateStats","Finish","player","fullName","numberOfGames","wins","loses","App","loggedIn","setPlayer","setDeck","fetch","then","response","json","logPlayer","prevState","updateName","result","winNum","loseNum","gameNum","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0d22a90.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function LogInWin(props) {\r\n\r\n    const [playerName,setPlayerName] = useState('');\r\n    const [goToGame, setGoToGame] = useState('/')\r\n\r\n    const updateName = (e)=>{ // check value of name and set link target appropriatly\r\n        setPlayerName(e.target.value);\r\n        if(e.target.value.length > 0){\r\n            setGoToGame('/game');\r\n        }\r\n        else{\r\n            setGoToGame('/');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='form-group container'>\r\n        <h3>Welcome {playerName}</h3>\r\n            <input onChange={updateName} value={playerName} type='text' className='form-control' placeholder='Please enter your name' /><br />\r\n            <Link to={goToGame}><button type='submit' className='btn btn-danger' id='start'>Start</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState, useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Game.css'\r\n\r\nexport default function (props) {\r\n\r\n\r\n    const [rounds, setRounds] = useState(24);\r\n    const[userScore, setUserScore] = useState(0);\r\n    const[pcScore,setPcScore] = useState(0);\r\n    const [userDeck, setUserDeck] = useState([{image: 'https://static.impression.co.uk/2014/05/loading1.gif'}]);\r\n    const [pcDeck, setPcDeck] = useState([{image: 'https://static.impression.co.uk/2014/05/loading1.gif'}]);\r\n    const [deckIndex, setDeckIndex] = useState(0)\r\n\r\n\r\n    useEffect(()=>{\r\n        if (props.deck.success){\r\n            let allCards = [...props.deck.cards];\r\n            setUserDeck(allCards.splice(0,25));\r\n            setPcDeck(allCards);\r\n        }\r\n    },[])\r\n    console.log(userDeck);\r\n    console.log(pcDeck);\r\n \r\n\r\n    const finishRound = ()=>{\r\n        let newUserDeck=userDeck;\r\n        let newPcDeck =pcDeck;\r\n        if(rounds > 0){\r\n            let userValue, pcValue;\r\n            switch(pcDeck[deckIndex].value){\r\n                case 'ACE': \r\n                pcValue = 14;\r\n                break;\r\n                case 'KING':\r\n                    pcValue = 13;\r\n                    break;\r\n                    case 'QUEEN':\r\n                        pcValue = 12;\r\n                        break;\r\n                        case 'JACK':\r\n                            pcValue = 11;\r\n                            break;\r\n                            default:\r\n                                pcValue = parseInt(pcDeck[deckIndex].value)\r\n            }\r\n            switch(userDeck[deckIndex].value){\r\n                case 'ACE': \r\n                userValue = 14;\r\n                break;\r\n                case 'KING':\r\n                    userValue = 13;\r\n                    break;\r\n                    case 'QUEEN':\r\n                        userValue = 12;\r\n                        break;\r\n                        case 'JACK':\r\n                            userValue = 11;\r\n                            break;\r\n                            default:\r\n                                userValue = parseInt(userDeck[deckIndex].value)\r\n            }\r\n\r\n            if(pcValue > userValue){\r\n                setPcScore(pcScore+1);\r\n            }else if (pcValue < userValue){\r\n                setUserScore(userScore+1);\r\n            }\r\n            setRounds(rounds-1);\r\n            /*newUserDeck.shift();\r\n            setUserDeck(newUserDeck);\r\n            newPcDeck.shift();\r\n            setPcDeck(newPcDeck);*/\r\n            if(deckIndex !== userDeck.length-1){\r\n                setDeckIndex(deckIndex+1)\r\n            }\r\n        }\r\n        else{\r\n            if(userScore>pcScore){\r\n                props.updateStats(true);\r\n            }else{\r\n                props.updateStats(false);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='gameDiv'>\r\n            <div className='row'>\r\n                <div className='col-md-6'>\r\n                    <h1>Computer: {pcScore} points</h1><br />\r\n                    {rounds < 0 ? 'dd' : <img src={pcDeck[deckIndex].image} />}\r\n                </div>\r\n                <div className='col-md-6'>\r\n                    <h1>You: {userScore} points</h1><br />\r\n                    {rounds < 0 ? 'dd' : <img src={userDeck[deckIndex].image} />}\r\n                </div>\r\n            </div>\r\n            <p>cards remaining {rounds}</p>\r\n            <Link to={rounds===0 && '/finish'}><button className='btn btn-primary btn-lg' onClick={finishRound}>Next</button></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Finish(props) {\r\n    return (\r\n        <div>\r\n            <h2>Statistics: {props.player.fullName}</h2>\r\n            <h3> number of games: {props.player.numberOfGames}</h3>\r\n            <h3> wins: {props.player.wins}</h3>\r\n            <h3> loses: {props.player.loses}</h3>\r\n            <Link to='/game'><button className='btn btn-alert'>play again?</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState, useEffect} from 'react'\nimport './App.css';\nimport {BrowserRouter as Router,Switch , Route} from 'react-router-dom';\nimport Login from './components/LogInWin'\nimport Game from './components/Game'\nimport Finish from './components/Finish'\nimport Api from './components/Apitry';\nfunction App() {\n\nconst [player,setPlayer] = useState({fullName:'',wins:0,loses:0,numberOfGames:0,cards:[],loggedIn:false});\nconst [deck, setDeck] = useState({success: false});\n\nconst [isLoaded, setIsLoaded] = useState(false);\n\nuseEffect(()=>{\n  fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=52')\n  .then(response => response.json())\n  .then(deck => {\n                  setDeck(deck);\n                }\n        )},[])\n\nconst logPlayer = ()=>{ // logging in the player\n  setPlayer((prevState) =>{\n    return({...prevState, loggedIn: true,})})\n  }\n\n  const updateDeck = (newDeck)=>{\n    setPlayer((prevState)=>{\n      return({...prevState,cards: newDeck,})\n    })\n  }\n\n  const updateName = (playerName)=>{ //update user name from imput\n    setPlayer((prevState)=>{\n      return({...prevState,fullName: playerName,})\n    })\n  }\n\n  const updateStats = (result)=>{//function update win/lose and num of games stats\n    setPlayer((prevState)=>{\n      let winNum=prevState.wins+1;\n      let loseNum=prevState.loses+1;\n      let gameNum=prevState.numberOfGames+1;\n      if(result){\n      setPlayer({...prevState,wins: winNum,numberOfGames: gameNum});\n      }else{\n        setPlayer({...prevState,loses: loseNum,numberOfGames: gameNum});\n      }\n    })\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n        \n          <Route exact path='/' component={()=><Login player={player} logPlayer={logPlayer} updateName={updateName}/>} />\n          <Route exact path='/game' component={()=><Game updateStats={updateStats} deck={deck} />}/>\n          <Route exact path='/finish' component={()=><Finish player={player} />}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}